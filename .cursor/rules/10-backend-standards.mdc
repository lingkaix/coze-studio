---
alwaysApply: true
---
# U MUST make tests following the contact/IDL/existing impl, before the implementation, and then do git commit the tests. Then make ur implementation passes the tests. U cannot go to the next step until u pass the tests and git commit the successful impl. u should use flag `-gcflags=all=-N -gcflags=all=-l` and only run the created test files.

### Backend Directory Structure

- `backend/api`
  - `handler/`: request processorsdev: kv
  - `internal/`: internal tools
  - `middleware/`: middleware components
  - `model/`: API model definitions
  - `router/`: route definitions
- `backend/application`
  - `app/`, `conversation/`, `knowledge/`, `memory/`, `modelmgr/`, `plugin/`, `prompt/`, `search/`, `singleagent/`, `user/`, `workflow/`
- `backend/conf`
  - `model/`, `plugin/`, `prompt/`
- `backend/crossdomain`
  - `contract/`, `impl/`, `workflow/`
- `backend/domain`
  - `agent/`, `app/`, `conversation/`, `knowledge/`, `memory/`, `modelmgr/`, `plugin/`, `prompt/`, `search/`, `user/`, `workflow/`
- `backend/infra`
  - `contract/`, `impl/`
- `backend/pkg`: dependency-free utilities
- `backend/types`: constants, DDL, errno

### Standards

- Follow DDD boundaries: domain logic in `domain`, orchestration in `application`, IO concerns in `infra`.
- Expose HTTP via Hertz in `api`; keep handlers thin and delegate to application services.
- Error codes live under `backend/types/errno`; reference these in responses and logs.

### Testing

- Use Vitest for Node-side utilities and Go test for Go code as applicable in repo.
- Place unit tests alongside code or in module-level `internal/testutil` as repo conventions dictate.

#### Go unit testing specifications

- UT function naming:
  - Ordinary functions: `Test{FunctionName}(t *testing.T)`
  - Object methods: `Test{ObjectName}{MethodName}(t *testing.T)`
  - Benchmarks (functions): `Benchmark{FunctionName}(b *testing.B)`
  - Benchmarks (methods): `Benchmark{ObjectName}{MethodName}(b *testing.B)`
- File naming: test files mirror the source filename with suffix `_test.go` and are placed in the same directory.
- Test design:
  - Prefer table-driven tests to define inputs/outputs and cover varied scenarios.
  - Use `github.com/stretchr/testify` to simplify assertions.
  - Use `github.com/uber-go/mock` to generate mocks; avoid patch/stubbing approaches where possible.

### Cross-domain

- Define interfaces in `backend/crossdomain/contract`, implement in `impl`, to avoid direct domain coupling.

Source: `Development Standards` wiki [7. Development Standards](https://github.com/coze-dev/coze-studio/wiki/7.-Development-Standards)

