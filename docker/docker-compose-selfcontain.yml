x-shared-env: &shared-env
  # Data Directory Prefix
  DATA_PREFIX: ${DATA_PREFIX:-./data}
  
  # Server
  LISTEN_ADDR: ${LISTEN_ADDR:-:8888}
  LOG_LEVEL: ${LOG_LEVEL:-debug}
  MAX_REQUEST_BODY_SIZE: ${MAX_REQUEST_BODY_SIZE:-1073741824}
  SERVER_HOST: ${SERVER_HOST:-http://localhost:8888}
  MINIO_PROXY_ENDPOINT: ${MINIO_PROXY_ENDPOINT:-}
  USE_SSL: ${USE_SSL:-0}
  SSL_CERT_FILE: ${SSL_CERT_FILE:-}
  SSL_KEY_FILE: ${SSL_KEY_FILE:-}
  
  # MySQL
  MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
  MYSQL_DATABASE: ${MYSQL_DATABASE:-opencoze}
  MYSQL_USER: ${MYSQL_USER:-coze}
  MYSQL_PASSWORD: ${MYSQL_PASSWORD:-coze123}
  MYSQL_HOST: ${MYSQL_HOST:-mysql}
  MYSQL_PORT: ${MYSQL_PORT:-3306}
  MYSQL_DSN: ${MYSQL_DSN:-coze:coze123@tcp(mysql:3306)/opencoze?charset=utf8mb4&parseTime=True}
  ATLAS_URL: ${ATLAS_URL:-mysql://coze:coze123@mysql:3306/opencoze?charset=utf8mb4&parseTime=True}
  
  # Redis
  REDIS_AOF_ENABLED: ${REDIS_AOF_ENABLED:-no}
  REDIS_PORT_NUMBER: ${REDIS_PORT_NUMBER:-6379}
  REDIS_IO_THREADS: ${REDIS_IO_THREADS:-4}
  ALLOW_EMPTY_PASSWORD: ${ALLOW_EMPTY_PASSWORD:-yes}
  REDIS_ADDR: ${REDIS_ADDR:-redis:6379}
  REDIS_PASSWORD: ${REDIS_PASSWORD:-}
  
  # File Upload
  FILE_UPLOAD_COMPONENT_TYPE: ${FILE_UPLOAD_COMPONENT_TYPE:-storage}
  
  # VolcEngine ImageX
  VE_IMAGEX_AK: ${VE_IMAGEX_AK:-}
  VE_IMAGEX_SK: ${VE_IMAGEX_SK:-}
  VE_IMAGEX_SERVER_ID: ${VE_IMAGEX_SERVER_ID:-}
  VE_IMAGEX_DOMAIN: ${VE_IMAGEX_DOMAIN:-}
  VE_IMAGEX_TEMPLATE: ${VE_IMAGEX_TEMPLATE:-}
  VE_IMAGEX_UPLOAD_HOST: ${VE_IMAGEX_UPLOAD_HOST:-https://imagex.volcengineapi.com}
  
  # Storage component
  # minio / tos / s3
  STORAGE_TYPE: ${STORAGE_TYPE:-minio}
  # http / https. If coze studio website is https, you must set it to https
  STORAGE_UPLOAD_HTTP_SCHEME: ${STORAGE_UPLOAD_HTTP_SCHEME:-http}
  STORAGE_BUCKET: ${STORAGE_BUCKET:-opencoze}
  # MiniIO
  MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
  MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
  MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS:-milvus}
  MINIO_AK: ${MINIO_AK:-minioadmin}
  MINIO_SK: ${MINIO_SK:-minioadmin123}
  MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio:9000}
  MINIO_API_HOST: ${MINIO_API_HOST:-http://minio:9000}
  
  # TOS
  TOS_ACCESS_KEY: ${TOS_ACCESS_KEY:-}
  TOS_SECRET_KEY: ${TOS_SECRET_KEY:-}
  TOS_ENDPOINT: ${TOS_ENDPOINT:-https://tos-cn-beijing.volces.com}
  TOS_BUCKET_ENDPOINT: ${TOS_BUCKET_ENDPOINT:-https://opencoze.tos-cn-beijing.volces.com}
  TOS_REGION: ${TOS_REGION:-cn-beijing}
  
  # S3
  S3_ACCESS_KEY: ${S3_ACCESS_KEY:-}
  S3_SECRET_KEY: ${S3_SECRET_KEY:-}
  S3_ENDPOINT: ${S3_ENDPOINT:-}
  S3_BUCKET_ENDPOINT: ${S3_BUCKET_ENDPOINT:-}
  S3_REGION: ${S3_REGION:-}
  
  # Elasticsearch
  ES_ADDR: ${ES_ADDR:-http://elasticsearch:9200}
  ES_VERSION: ${ES_VERSION:-v8}
  ES_USERNAME: ${ES_USERNAME:-}
  ES_PASSWORD: ${ES_PASSWORD:-}
  
  # Message Queue
  COZE_MQ_TYPE: ${COZE_MQ_TYPE:-nsq}
  MQ_NAME_SERVER: ${MQ_NAME_SERVER:-nsqd:4150}
  # RocketMQ
  RMQ_ACCESS_KEY: ${RMQ_ACCESS_KEY:-}
  RMQ_SECRET_KEY: ${RMQ_SECRET_KEY:-}
  
  # Vector Store
  # VectorStore type: milvus / vikingdb
  VECTOR_STORE_TYPE: ${VECTOR_STORE_TYPE:-milvus}
  # milvus vector store
  MILVUS_ADDR: ${MILVUS_ADDR:-milvus:19530}
  # If you want to use vikingdb, you need to set up the vikingdb configuration.
  VIKING_DB_HOST: ${VIKING_DB_HOST:-}
  VIKING_DB_REGION: ${VIKING_DB_REGION:-}
  VIKING_DB_AK: ${VIKING_DB_AK:-}
  VIKING_DB_SK: ${VIKING_DB_SK:-}
  VIKING_DB_SCHEME: ${VIKING_DB_SCHEME:-}
  # if vikingdb model name is not set, you need to set Embedding settings
  VIKING_DB_MODEL_NAME: ${VIKING_DB_MODEL_NAME:-}
  
  # Embedding
  # The Embedding model relied on by knowledge base, vectorization does not need to be configured.
  # if the vector database comes with built-in Embedding functionality (such as VikingDB).
  # embedding type: openai / ark / ollama / http
  EMBEDDING_TYPE: ${EMBEDDING_TYPE:-ark}
  EMBEDDING_MAX_BATCH_SIZE: ${EMBEDDING_MAX_BATCH_SIZE:-100}
  OPENAI_EMBEDDING_BASE_URL: ${OPENAI_EMBEDDING_BASE_URL:-}
  OPENAI_EMBEDDING_MODEL: ${OPENAI_EMBEDDING_MODEL:-}
  OPENAI_EMBEDDING_API_KEY: ${OPENAI_EMBEDDING_API_KEY:-}
  OPENAI_EMBEDDING_BY_AZURE: ${OPENAI_EMBEDDING_BY_AZURE:-false}
  OPENAI_EMBEDDING_API_VERSION: ${OPENAI_EMBEDDING_API_VERSION:-}
  OPENAI_EMBEDDING_DIMS: ${OPENAI_EMBEDDING_DIMS:-1024}
  OPENAI_EMBEDDING_REQUEST_DIMS: ${OPENAI_EMBEDDING_REQUEST_DIMS:-1024}
  ARK_EMBEDDING_MODEL: ${ARK_EMBEDDING_MODEL:-}
  ARK_EMBEDDING_API_KEY: ${ARK_EMBEDDING_API_KEY:-}
  ARK_EMBEDDING_DIMS: ${ARK_EMBEDDING_DIMS:-2048}
  ARK_EMBEDDING_BASE_URL: ${ARK_EMBEDDING_BASE_URL:-}
  ARK_EMBEDDING_API_TYPE: ${ARK_EMBEDDING_API_TYPE:-}
  OLLAMA_EMBEDDING_BASE_URL: ${OLLAMA_EMBEDDING_BASE_URL:-}
  OLLAMA_EMBEDDING_MODEL: ${OLLAMA_EMBEDDING_MODEL:-}
  OLLAMA_EMBEDDING_DIMS: ${OLLAMA_EMBEDDING_DIMS:-1024}
  HTTP_EMBEDDING_ADDR: ${HTTP_EMBEDDING_ADDR:-}
  HTTP_EMBEDDING_DIMS: ${HTTP_EMBEDDING_DIMS:-1024}
  
  # OCR
  # If you want to use the OCR-related functions in the knowledge base feature，You need to set up the OCR configuration.
  # Currently, Coze Studio has built-in Volcano OCR.
  OCR_TYPE: ${OCR_TYPE:-ve}
  VE_OCR_AK: ${VE_OCR_AK:-}
  VE_OCR_SK: ${VE_OCR_SK:-}
  
  # Model
  MODEL_PROTOCOL_0: ${MODEL_PROTOCOL_0:-ark}
  MODEL_OPENCOZE_ID_0: ${MODEL_OPENCOZE_ID_0:-100001}
  MODEL_NAME_0: ${MODEL_NAME_0:-}
  MODEL_ID_0: ${MODEL_ID_0:-}
  MODEL_API_KEY_0: ${MODEL_API_KEY_0:-}
  MODEL_BASE_URL_0: ${MODEL_BASE_URL_0:-}
  
  # Builtin Chat Model
  BUILTIN_CM_TYPE: ${BUILTIN_CM_TYPE:-ark}
  BUILTIN_CM_OPENAI_BASE_URL: ${BUILTIN_CM_OPENAI_BASE_URL:-}
  BUILTIN_CM_OPENAI_API_KEY: ${BUILTIN_CM_OPENAI_API_KEY:-}
  BUILTIN_CM_OPENAI_BY_AZURE: ${BUILTIN_CM_OPENAI_BY_AZURE:-false}
  BUILTIN_CM_OPENAI_MODEL: ${BUILTIN_CM_OPENAI_MODEL:-}
  BUILTIN_CM_ARK_API_KEY: ${BUILTIN_CM_ARK_API_KEY:-}
  BUILTIN_CM_ARK_MODEL: ${BUILTIN_CM_ARK_MODEL:-}
  BUILTIN_CM_ARK_BASE_URL: ${BUILTIN_CM_ARK_BASE_URL:-}
  BUILTIN_CM_DEEPSEEK_BASE_URL: ${BUILTIN_CM_DEEPSEEK_BASE_URL:-}
  BUILTIN_CM_DEEPSEEK_API_KEY: ${BUILTIN_CM_DEEPSEEK_API_KEY:-}
  BUILTIN_CM_DEEPSEEK_MODEL: ${BUILTIN_CM_DEEPSEEK_MODEL:-}
  BUILTIN_CM_OLLAMA_BASE_URL: ${BUILTIN_CM_OLLAMA_BASE_URL:-}
  BUILTIN_CM_OLLAMA_MODEL: ${BUILTIN_CM_OLLAMA_MODEL:-}
  BUILTIN_CM_QWEN_BASE_URL: ${BUILTIN_CM_QWEN_BASE_URL:-}
  BUILTIN_CM_QWEN_API_KEY: ${BUILTIN_CM_QWEN_API_KEY:-}
  BUILTIN_CM_QWEN_MODEL: ${BUILTIN_CM_QWEN_MODEL:-}
  BUILTIN_CM_GEMINI_BACKEND: ${BUILTIN_CM_GEMINI_BACKEND:-}
  BUILTIN_CM_GEMINI_API_KEY: ${BUILTIN_CM_GEMINI_API_KEY:-}
  BUILTIN_CM_GEMINI_PROJECT: ${BUILTIN_CM_GEMINI_PROJECT:-}
  BUILTIN_CM_GEMINI_LOCATION: ${BUILTIN_CM_GEMINI_LOCATION:-}
  BUILTIN_CM_GEMINI_BASE_URL: ${BUILTIN_CM_GEMINI_BASE_URL:-}
  BUILTIN_CM_GEMINI_MODEL: ${BUILTIN_CM_GEMINI_MODEL:-}
  
  # Code Runner
  CODE_RUNNER_TYPE: ${CODE_RUNNER_TYPE:-local}
  CODE_RUNNER_ALLOW_ENV: ${CODE_RUNNER_ALLOW_ENV:-}
  CODE_RUNNER_ALLOW_READ: ${CODE_RUNNER_ALLOW_READ:-}
  CODE_RUNNER_ALLOW_WRITE: ${CODE_RUNNER_ALLOW_WRITE:-}
  CODE_RUNNER_ALLOW_RUN: ${CODE_RUNNER_ALLOW_RUN:-}
  CODE_RUNNER_ALLOW_NET: ${CODE_RUNNER_ALLOW_NET:-cdn.jsdelivr.net}
  CODE_RUNNER_ALLOW_FFI: ${CODE_RUNNER_ALLOW_FFI:-}
  CODE_RUNNER_NODE_MODULES_DIR: ${CODE_RUNNER_NODE_MODULES_DIR:-}
  CODE_RUNNER_TIMEOUT_SECONDS: ${CODE_RUNNER_TIMEOUT_SECONDS:-}
  CODE_RUNNER_MEMORY_LIMIT_MB: ${CODE_RUNNER_MEMORY_LIMIT_MB:-}
  
  # Registration
  DISABLE_USER_REGISTRATION: ${DISABLE_USER_REGISTRATION:-}
  ALLOW_REGISTRATION_EMAIL: ${ALLOW_REGISTRATION_EMAIL:-}
  
  # Plugin AES Secrets
  PLUGIN_AES_AUTH_SECRET: ${PLUGIN_AES_AUTH_SECRET:-^*6x3hdu2nc%-p38}
  PLUGIN_AES_STATE_SECRET: ${PLUGIN_AES_STATE_SECRET:-osj^kfhsd*(z!sno}
  PLUGIN_AES_OAUTH_TOKEN_SECRET: ${PLUGIN_AES_OAUTH_TOKEN_SECRET:-cn+-PJ(HhJ[5d*z9}
  
  # Etcd specific
  ETCD_AUTO_COMPACTION_MODE: ${ETCD_AUTO_COMPACTION_MODE:-revision}
  ETCD_AUTO_COMPACTION_RETENTION: ${ETCD_AUTO_COMPACTION_RETENTION:-1000}
  ETCD_QUOTA_BACKEND_BYTES: ${ETCD_QUOTA_BACKEND_BYTES:-4294967296}
  ALLOW_NONE_AUTHENTICATION: ${ALLOW_NONE_AUTHENTICATION:-yes}
  ETCD_ROOT_PASSWORD: ${ETCD_ROOT_PASSWORD:-}
  
  # Other
  TEST: ${TEST:-1}

services:
  mysql:
    image: mysql:8.4.5
    restart: always
    environment:
      <<: *shared-env
    volumes:
      - ${DATA_PREFIX:-./data}/mysql:/var/lib/mysql
      - ./volumes/mysql/schema.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test:
        [
          'CMD',
          'mysqladmin',
          'ping',
          '-h',
          'localhost',
          '-u${MYSQL_USER}',
          '-p${MYSQL_PASSWORD}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - coze-network

  redis:
    image: bitnami/redis:8.0
    restart: always
    user: root
    privileged: true
    environment:
      <<: *shared-env
    volumes:
      - ${DATA_PREFIX:-./data}/bitnami/redis:/bitnami/redis/data:rw,Z
    command: >
      bash -c "
        /opt/bitnami/scripts/redis/setup.sh
        # Set proper permissions for data directories
        chown -R redis:redis /bitnami/redis/data
        chmod g+s /bitnami/redis/data

        exec /opt/bitnami/scripts/redis/entrypoint.sh /opt/bitnami/scripts/redis/run.sh
      "
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s
    networks:
      - coze-network

  elasticsearch:
    image: bitnami/elasticsearch:8.18.0
    restart: always
    user: root
    privileged: true
    environment:
      <<: *shared-env
      # Add Java certificate trust configuration
      # - ES_JAVA_OPTS=-Djdk.tls.client.protocols=TLSv1.2 -Dhttps.protocols=TLSv1.2 -Djavax.net.ssl.trustAll=true -Xms4096m -Xmx4096m
    volumes:
      - ${DATA_PREFIX:-./data}/bitnami/elasticsearch:/bitnami/elasticsearch/data
      - ./volumes/elasticsearch/elasticsearch.yml:/opt/bitnami/elasticsearch/config/my_elasticsearch.yml
      - ./volumes/elasticsearch/analysis-smartcn.zip:/opt/bitnami/elasticsearch/analysis-smartcn.zip:rw,Z
      - ./volumes/elasticsearch/setup_es.sh:/setup_es.sh
      - ./volumes/elasticsearch/es_index_schema:/es_index_schemas
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -f http://localhost:9200 && [ -f /tmp/es_plugins_ready ] && [ -f /tmp/es_init_complete ]',
        ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s
    networks:
      - coze-network
    # Install smartcn analyzer plugin and initialize ES
    command: >
      bash -c "
        /opt/bitnami/scripts/elasticsearch/setup.sh
        # Set proper permissions for data directories
        chown -R elasticsearch:elasticsearch /bitnami/elasticsearch/data
        chmod g+s /bitnami/elasticsearch/data

        # Create plugin directory
        mkdir -p /bitnami/elasticsearch/plugins;

        # Unzip plugin to plugin directory and set correct permissions
        echo 'Installing smartcn plugin...';
        if [ ! -d /opt/bitnami/elasticsearch/plugins/analysis-smartcn ]; then

          # Download plugin package locally
          echo 'Copying smartcn plugin...';
          cp /opt/bitnami/elasticsearch/analysis-smartcn.zip /tmp/analysis-smartcn.zip 

          elasticsearch-plugin install file:///tmp/analysis-smartcn.zip
          if [[ \"$$?\" != \"0\" ]]; then
            echo 'Plugin installation failed, exiting operation';
            rm -rf /opt/bitnami/elasticsearch/plugins/analysis-smartcn
            exit 1;
          fi;
          rm -f /tmp/analysis-smartcn.zip;
        fi;

        # Create marker file indicating plugin installation success
        touch /tmp/es_plugins_ready;
        echo 'Plugin installation successful, marker file created';

        # Start initialization script in background
        (
          echo 'Waiting for Elasticsearch to be ready...'
          until curl -s -f http://localhost:9200/_cat/health >/dev/null 2>&1; do
            echo 'Elasticsearch not ready, waiting...'
            sleep 2
          done
          echo 'Elasticsearch is ready!'

          # Run ES initialization script
          echo 'Running Elasticsearch initialization...'
          sed 's/\r$//' /setup_es.sh > /setup_es_fixed.sh
          chmod +x /setup_es_fixed.sh
          /setup_es_fixed.sh --index-dir /es_index_schemas
          # Create marker file indicating initialization completion
          touch /tmp/es_init_complete
          echo 'Elasticsearch initialization completed successfully!'
        ) &

        # Start Elasticsearch
        exec /opt/bitnami/scripts/elasticsearch/entrypoint.sh /opt/bitnami/scripts/elasticsearch/run.sh
        echo -e \"⏳ Adjusting Elasticsearch disk watermark settings...\"
      "

  minio:
    image: minio/minio:RELEASE.2025-06-13T11-33-47Z-cpuv1
    user: root
    privileged: true
    restart: always
    volumes:
      - ${DATA_PREFIX:-./data}/minio:/data
      - ./volumes/minio/default_icon/:/default_icon
      - ./volumes/minio/official_plugin_icon/:/official_plugin_icon
    environment:
      <<: *shared-env
    entrypoint:
      - /bin/sh
      - -c
      - |
        # Run initialization in background
        (
          # Wait for MinIO to be ready
          until (/usr/bin/mc alias set localminio http://localhost:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD}) do
            echo "Waiting for MinIO to be ready..."
            sleep 1
          done

          # Create bucket and copy files
          /usr/bin/mc mb --ignore-existing localminio/$${STORAGE_BUCKET}
          /usr/bin/mc cp --recursive /default_icon/ localminio/$${STORAGE_BUCKET}/default_icon/
          /usr/bin/mc cp --recursive /official_plugin_icon/ localminio/$${STORAGE_BUCKET}/official_plugin_icon/

          echo "MinIO initialization complete."
        ) &

        # Start minio server in foreground
        exec minio server /data --console-address ":9001"
    healthcheck:
      test:
        [
          'CMD-SHELL',
          '/usr/bin/mc alias set health_check http://localhost:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} && /usr/bin/mc ready health_check',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - coze-network

  etcd:
    image: bitnami/etcd:3.5
    user: root
    restart: always
    privileged: true
    environment:
      <<: *shared-env
    volumes:
      - ${DATA_PREFIX:-./data}/bitnami/etcd:/bitnami/etcd:rw,Z
      - ./volumes/etcd/etcd.conf.yml:/opt/bitnami/etcd/conf/etcd.conf.yml:ro,Z
    command: >
      bash -c "
        /opt/bitnami/scripts/etcd/setup.sh
        # Set proper permissions for data and config directories
        chown -R etcd:etcd /bitnami/etcd
        chmod g+s /bitnami/etcd

        exec /opt/bitnami/scripts/etcd/entrypoint.sh /opt/bitnami/scripts/etcd/run.sh
      "
    healthcheck:
      test: ['CMD', 'etcdctl', 'endpoint', 'health']
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s
    networks:
      - coze-network

  milvus:
    image: milvusdb/milvus:v2.5.10
    user: root
    privileged: true
    restart: always
    command: >
      bash -c "
        # Set proper permissions for data directories
        chown -R root:root /var/lib/milvus
        chmod g+s /var/lib/milvus

        exec milvus run standalone
      "
    security_opt:
      - seccomp:unconfined
    environment:
      <<: *shared-env
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MINIO_BUCKET_NAME: milvus
      MINIO_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      MINIO_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: false
    volumes:
      - ${DATA_PREFIX:-./data}/milvus:/var/lib/milvus:rw,Z
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9091/healthz']
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - coze-network

  nsqlookupd:
    image: nsqio/nsq:v1.2.1
    command: /nsqlookupd
    restart: always
    networks:
      - coze-network
    healthcheck:
      test: ['CMD-SHELL', 'nsqlookupd --version']
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s

  nsqd:
    image: nsqio/nsq:v1.2.1
    command: /nsqd --lookupd-tcp-address=nsqlookupd:4160 --broadcast-address=nsqd
    restart: always
    depends_on:
      nsqlookupd:
        condition: service_healthy
    networks:
      - coze-network
    healthcheck:
      test: ['CMD-SHELL', '/nsqd --version']
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s

  nsqadmin:
    image: nsqio/nsq:v1.2.1
    command: /nsqadmin --lookupd-http-address=nsqlookupd:4161
    restart: always
    depends_on:
      nsqlookupd:
        condition: service_healthy
    networks:
      - coze-network

  coze-server:
    # build:
    #   context: ../
    #   dockerfile: backend/Dockerfile
    image: opencoze/opencoze:latest
    restart: always
    environment:
      <<: *shared-env
    networks:
      - coze-network
    volumes:
      - .env:/app/.env
      - ../backend/conf:/app/resources/conf
      # - ../backend/static:/app/resources/static
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      minio:
        condition: service_healthy
      milvus:
        condition: service_healthy
    command: ['/app/opencoze']

  coze-web:
    # build:
    #   context: ..
    #   dockerfile: frontend/Dockerfile
    image: opencoze/web:latest
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # Main nginx config
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro  # Proxy config
      # - ./nginx/ssl:/etc/nginx/ssl:ro  # SSL certificates (uncomment if using SSL)
    depends_on:
      - coze-server
    networks:
      - coze-network
    ports:
      - "${WEB_PORT}:80"

networks:
  coze-network:
    driver: bridge